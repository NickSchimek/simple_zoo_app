 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "zoos/id/animals", type: :request do
  # Animal. As you add validations to Animal, be sure to
  # adjust the attributes here as well.

  let(:user) { FactoryBot.create(:user) }
  let(:zoo) { FactoryBot.create(:zoo) }

  describe "GET /index" do
    it "renders a successful response" do
      FactoryBot.create(:animal)
      get zoo_animals_url(zoo)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      animal = FactoryBot.create(:animal, zoo: zoo)
      get zoo_animal_url(zoo, animal)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    context "when user is not authorized" do
      it "does not render a successful response" do
        get new_zoo_animal_url(zoo)
        expect(response).to_not be_successful
      end
    end

    context "when user is authorized" do
      it "renders a successful response" do
        sign_in user
        get new_zoo_animal_url(zoo)
        expect(response).to be_successful
      end
    end
  end

  describe "GET /edit" do
    let!(:animal) { FactoryBot.create(:animal) }

    context "when user is authorized" do
      it "render a successful response" do
        sign_in user
        get edit_zoo_animal_url(zoo, animal)
        expect(response).to be_successful
      end
    end

    context "when user is not authorized" do
      it "does not render a successful response" do
        get edit_zoo_animal_url(zoo, animal)
        expect(response).to_not be_successful
      end
    end
  end
end
